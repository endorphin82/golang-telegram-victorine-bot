package main

import (
	"fmt"
	"gopkg.in/telegram-bot-api.v4"
	"time"
	//"os/user"
)

func regpi(msg *tgbotapi.Message, update tgbotapi.Update) {
	var reply tgbotapi.MessageConfig
	var user Users
	var group Groups
	gdb.Where("groupId = ?", msg.Chat.ID).First(&group)
	gdb.Where("userId = ? AND groupId = ?", msg.From.ID, group.Id).First(&user)


	if len(msg.From.UserName) == 0 {
		reply = tgbotapi.NewMessage(msg.Chat.ID, "–£ –¥–µ–≤–æ—á–∫–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏.")
	} else if user.Id == 0 {
		gdb.Where("groupId = ?", msg.Chat.ID).First(&group)

		user.Username = "@" + msg.From.UserName
		user.UserId = msg.From.ID
		user.GroupId = group.Id
		user.Score = 0
		gdb.Create(&user)
		reply = tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("–¢—ã —Ä–µ–≥–Ω—É–ª—Å—è, %s", user.Username))
	} else {
		reply = tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprint("–≠–π, —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ!"))
	}

	reply.ReplyToMessageID = update.Message.MessageID
	bot.Send(reply)
}

func showpid(msg *tgbotapi.Message) {
	var group Groups
	var users []Users
	gdb.Where("groupId = ?", msg.Chat.ID).First(&group)
	gdb.Where("groupId = ?", group.Id).Find(&users)

	if len(users) != 0 {
		output := "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –ø–∏–¥–æ—Ä—ã –¥–Ω—è:\n"
		for _, i := range users {
			output += i.Username + "\n"
		}
		output += "–•–æ—á–µ—à—å —Å–µ–±—è —É–≤–∏–¥–µ—Ç—å —Ç—É—Ç?\n–ñ–º–∏ /regpi"
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, output))
	} else {
		output := "–ü–∏–¥–æ—Ä–æ–≤ –Ω–µ—Ç! –ë—É–¥—å –ø–µ—Ä–≤—ã–º! –ñ–º–∏ /regpi"
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, output))
	}
}

func pidorStat(msg *tgbotapi.Message) {
	var group Groups
	var users []Users
	var reply tgbotapi.MessageConfig
	var flag bool
	gdb.Where("groupId = ?", msg.Chat.ID).First(&group)
	gdb.Where("groupId = ?", group.Id).Order("score desc").Find(&users)

	output := "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
	for _, i := range users {
		if i.Score != 0 {
			output += fmt.Sprintf("%s: %d\n", i.Username, i.Score)
			flag = true
		}
	}

	if flag {
		reply = tgbotapi.NewMessage(msg.Chat.ID, output)
	} else {
		reply = tgbotapi.NewMessage(msg.Chat.ID, "–ü–∏–¥–æ—Ä –¥–Ω—è –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω! –ñ–º–∏ /pidor")
	}

	bot.Send(reply)
}

func startQuiz(msg *tgbotapi.Message) {
	firstPhrases := []string {
		"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∏—Å–∫ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è...",
		"–í–Ω–∏–º–∞–Ω–∏–µ, –∏—â—É –ø–∏–¥–æ—Ä–∞!",
		"–ù—É-–∫–∞ –¥–∞–π-–∫–∞...",
		"–¢–∞–∫—Å, –∫—Ç–æ —Ç—É—Ç —É –Ω–∞—Å –º–∞–ª–æ –∫–∞—à–∏ –µ–ª?",
		"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.–ü–æ–∏—Å–∫.",
	}

	secondPhrases := []string {
		"–ö–∞–∂–µ—Ç—Å—è —è —á—Ç–æ-—Ç–æ –≤–∏–∂—É!",
		"–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å!",
		"–ü–æ–∂–∞–ª—É–π –ø—Ä–µ–ø—Ä–æ–≤–µ—Ä—é...",
		"–ù–∞–π–¥–µ–Ω!",
		"–ü—Ä—è–º –ø–æ –ë–∞–±–∏—á—É!",
		"–ö–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª –í–µ–ª–∏–∫–∏–π –ú–µ–π—Å—Ç–µ—Ä...",
	}

	var reply tgbotapi.MessageConfig
	var theUser Users
	var users []Users
	var randomUser int
	var group Groups
	var winner Users
	var winnerScore int
	var available Available
	gdb.Where("groupId = ?", msg.Chat.ID).First(&group)
	gdb.Where("groupId = ?", group.Id).Find(&users)
	gdb.Where("groupId = ?", group.Id).First(&available)

	rowsCounted := len(users)
	if rowsCounted == 0 {
		reply = tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ñ–º–∏ /regpi")
		bot.Send(reply)
	} else {
		if available.Flag {
			lenOfCurrentUsers := len(users)
			if lenOfCurrentUsers == 1 {
				randomUser = 0
			} else {
				randomUser = random(0, lenOfCurrentUsers - 1)
			}

			gdb.Where("id = ?", users[randomUser].Id).First(&winner)

			reply = tgbotapi.NewMessage(msg.Chat.ID, firstPhrases[random(0, len(secondPhrases) - 1)])
			bot.Send(reply)
			time.Sleep(time.Second * 2)
			reply = tgbotapi.NewMessage(msg.Chat.ID, secondPhrases[random(0, len(firstPhrases) - 1)])
			bot.Send(reply)
			gdb.Where("id = ? and groupId = ?", theUser, group.Id).First(&winner)
			winnerScore = winner.Score + 1
			gdb.Model(&users).Where("id = ?", winner.Id).UpdateColumn("score", winnerScore)
			time.Sleep(time.Second * 2)
			reply = tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("–ê–≥–∞! üéâüéâüéâ –°–µ–≥–æ–¥–Ω—è –ø–∏–¥–æ—Ä - %s", winner.Username))
			bot.Send(reply)
			gdb.Model(&available).Where("groupId = ?", group.Id).Update("flag", false)
			gdb.Model(&available).Where("groupId = ?", group.Id).Update("userId", winner.Id)
		} else {
			var currentUser Users
			gdb.Where("id = ?", available.UserId).First(&currentUser)
			reply = tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("üéâ–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å - %süéâ", currentUser.Username))
			bot.Send(reply)
		}
	}
}

func kekogen(msg *tgbotapi.Message) {
	var reply tgbotapi.MessageConfig
	vowels := []string {
	"–∞", "–æ", "–∏", "–µ", "—ë", "—ç", "—ã", "—É", "—é", "—è",
}
	consonants := []string {
	"–≤", "–¥", "–∫", "–ª", "–º", "–Ω", "–ø", "—Ä", "—Å", "—Ç", "—Ñ", "—Ö", "—à", "—â",
}
	result := "–∫–µ–∫"
	randomVowels := random(0, len(vowels) - 1)
	randomConsonants := random(0, len(consonants) - 1)

	result += vowels[randomVowels]
	result += consonants[randomConsonants]
	reply = tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf(result))
	bot.Send(reply)
}